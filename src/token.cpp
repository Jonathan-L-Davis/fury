#include "token.h"
#include <fstream>
#include <iostream>
#include <algorithm>

std::vector<std::string> keywords
{
    "byte",
    "dual",
    "else",
    "export",
    "for",
    "function",
    "goto",//not used? meh
    "if",
    "import",
    "oct",
    "quad",
    "return",
    "struct",
    "union",
    "while",
};

std::vector<std::string> operators
{
    "+",//arithmetic
    "-",
    "*",
    "/",
    "%",
    "=",

    ">>",//bitwise
    "<<",
    ">O>",
    "<O<",
    "&",
    "|",
    "~",
    "^",

    "==",//comparison
    "!=",
    ">",
    "<",
    ">=",
    "<=",

    ",",//sub-expression separator
    ";",//expression terminal

    "::",//scoping, add later
    ".",//member access & scoping current
    "..",//scoping backstep
};

//not used now, may be moved to parsing code
//I'm still learning how a compiler should work
std::vector<std::string> types =
{
    "byte",
    "dual",
    "quad",
    "oct",

    "struct",
    "union",
};

std::vector<token> tokenize( const std::string &file_name ){

    std::vector<token> retMe;

    std::fstream file(file_name,std::ios::in);

    std::string line;
    int line_depth = 0;
    int line_no = 1;

    auto next_token = [&line,&line_depth]{
        if(line == "")//avoid null string issues
            return std::string("");

        if( std::isspace(line[line_depth]) ){//advance until first non-ws
            while( (unsigned)line_depth < line.length() && std::isspace(line[line_depth]) )
                line_depth++;
        }

        int start_depth = line_depth;

        if( (unsigned)line_depth >= line.length() )//ignore ws that terminates a line
            return std::string("");

        //grab all non-ws chars
        while( (unsigned)line_depth < line.length() && !std::isspace(line[line_depth]) )
            line_depth++;

        return line.substr(start_depth,line_depth-start_depth);
    };

    while( std::getline( file, line) ){//line by line
        for( line_depth = 0; (unsigned)line_depth < line.length();  ){//tokenize only via ws breaks
            auto text = next_token();
            token tok = {text,(unsigned)line_no,get_token_type(text)};
            if(tok.text != "" )//don't push empty tokens, last token generated by a given line is a 'null' token
                retMe.push_back(tok);
        }
        line_no++;
    }

    return retMe;
}

token_type get_token_type( std::string type_me ){
    if( type_me == "" )
        return null;
    if( std::find(keywords.begin(), keywords.end(), type_me ) != keywords.end() )
        return keyword;
    if( std::find(operators.begin(), operators.end(), type_me ) != operators.end() )
        return Operator;
    return identifier;
}